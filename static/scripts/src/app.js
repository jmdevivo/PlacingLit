// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.PlacingLit = {
    Models: {},
    Collections: {},
    Views: {}
  };

  PlacingLit.Models.Location = (function(superClass) {
    extend(Location, superClass);

    function Location() {
      return Location.__super__.constructor.apply(this, arguments);
    }

    Location.prototype.defaults = {
      title: 'Put Title Here',
      author: 'Someone\'s Name goes here'
    };

    Location.prototype.url = '/places/add';

    return Location;

  })(Backbone.Model);

  PlacingLit.Models.Metadata = (function(superClass) {
    extend(Metadata, superClass);

    function Metadata() {
      return Metadata.__super__.constructor.apply(this, arguments);
    }

    Metadata.prototype.url = '/places/count';

    Metadata.prototype.initialize = function() {};

    return Metadata;

  })(Backbone.Model);

  PlacingLit.Collections.Locations = (function(superClass) {
    extend(Locations, superClass);

    function Locations() {
      return Locations.__super__.constructor.apply(this, arguments);
    }

    Locations.prototype.model = PlacingLit.Models.Location;

    Locations.prototype.url = '/places/show';

    return Locations;

  })(Backbone.Collection);

  PlacingLit.Collections.NewestLocations = (function(superClass) {
    extend(NewestLocations, superClass);

    function NewestLocations() {
      return NewestLocations.__super__.constructor.apply(this, arguments);
    }

    NewestLocations.prototype.model = PlacingLit.Models.Location;

    NewestLocations.prototype.url = '/places/recent';

    return NewestLocations;

  })(Backbone.Collection);

  PlacingLit.Collections.NewestLocationsByDate = (function(superClass) {
    extend(NewestLocationsByDate, superClass);

    function NewestLocationsByDate() {
      return NewestLocationsByDate.__super__.constructor.apply(this, arguments);
    }

    NewestLocationsByDate.prototype.model = PlacingLit.Models.Location;

    NewestLocationsByDate.prototype.url = '/places/allbydate';

    return NewestLocationsByDate;

  })(Backbone.Collection);

  PlacingLit.Collections.LocationsNear = (function(superClass) {
    extend(LocationsNear, superClass);

    function LocationsNear() {
      return LocationsNear.__super__.constructor.apply(this, arguments);
    }

    LocationsNear.prototype.model = PlacingLit.Models.Location;

    LocationsNear.prototype.url = '/places/near';

    return LocationsNear;

  })(Backbone.Collection);

  PlacingLit.Views.MapCanvasView = (function(superClass) {
    extend(MapCanvasView, superClass);

    function MapCanvasView() {
      this.closeSceneCard = bind(this.closeSceneCard, this);
      this.null_function = bind(this.null_function, this);
      this.addPlace = bind(this.addPlace, this);
      this.handleAddSceneButtonClick = bind(this.handleAddSceneButtonClick, this);
      this.showMarkers = bind(this.showMarkers, this);
      this.hideMarkers = bind(this.hideMarkers, this);
      this.handleViewportChange = bind(this.handleViewportChange, this);
      this.getRecentPlace = bind(this.getRecentPlace, this);
      this.getRecentBlog = bind(this.getRecentBlog, this);
      this.getPlacesNearController = bind(this.getPlacesNearController, this);
      this.getPlacesByTitle = bind(this.getPlacesByTitle, this);
      this.getPlacesByAuthor = bind(this.getPlacesByAuthor, this);
      return MapCanvasView.__super__.constructor.apply(this, arguments);
    }

    MapCanvasView.prototype.model = PlacingLit.Models.Location;

    MapCanvasView.prototype.el = 'map_canvas';

    MapCanvasView.prototype.gmap = null;

    MapCanvasView.prototype.infowindows = [];

    MapCanvasView.prototype.locations = null;

    MapCanvasView.prototype.userInfowindow = null;

    MapCanvasView.prototype.placeInfowindow = null;

    MapCanvasView.prototype.userMapsMarker = null;

    MapCanvasView.prototype.allMarkers = [];

    MapCanvasView.prototype.initialMapView = true;

    MapCanvasView.prototype.field_labels = {
      place_name: 'location',
      scene_time: 'time',
      actors: 'characters',
      symbols: 'symbols',
      description: 'description',
      notes: 'notes',
      visits: 'visits',
      date_added: 'added'
    };

    MapCanvasView.prototype.settings = {
      zoomLevel: {
        'wide': 4,
        'default': 5,
        'close': 14,
        'tight': 21,
        'increment': 1
      },
      markerDefaults: {
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/redpin.png'
      },
      maxTerrainZoom: 15
    };

    MapCanvasView.prototype.mapOptions = {
      zoom: 8,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
        position: google.maps.ControlPosition.TOP_RIGHT
      },
      maxZoom: 20,
      minZoom: 2,
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.DEFAULT,
        position: google.maps.ControlPosition.LEFT_CENTER
      },
      panControlOptions: {
        position: google.maps.ControlPosition.LEFT_CENTER
      }
    };

    MapCanvasView.prototype.initialize = function(scenes) {
      this.getRecentBlog();
      if (this.collection == null) {
        this.collection = new PlacingLit.Collections.Locations();
      }
      this.listenTo(this.collection, 'all', this.render);
      this.getRecentPlace();
      this.collection.fetch();
      this.suggestAuthors();
      this.attachNewSceneHandler();
      this.attachSearchHandler();
      this.linkMagnifyClickGcf();
      this.isShareLink();
      return this.isUserLoggedIn((function(_this) {
        return function() {
          console.log('User is logged in!');
          return $('#loginlink').html("Log Out");
        };
      })(this));
    };

    MapCanvasView.prototype.getPlacesByAuthor = function(author_name) {
      var authors_places;
      console.log('get places by author');
      authors_places = this.collection.where({
        author: author_name
      });
      return console.log(author_name + "\'s places: " + JSON.stringify(authors_places));
    };

    MapCanvasView.prototype.getPlacesByTitle = function(title_name) {
      var title_places;
      console.log('get places by title');
      title_places = this.collection.where({
        title: title_name
      });
      return console.log(title_name + "\'s places: " + JSON.stringify(title_places));
    };

    MapCanvasView.prototype.isShareLink = function() {
      var mapcenter, pathname;
      pathname = window.location.pathname;
      if (pathname.indexOf("map") > -1 && pathname.indexOf("filter") > -1 && pathname.indexOf("id") > -1) {
        mapcenter = new google.maps.LatLng(window.CENTER.lat, window.CENTER.lng);
        return this.gmap.setCenter(mapcenter);
      }
    };

    MapCanvasView.prototype.getPlacesNearController = function(position) {};

    MapCanvasView.prototype.getRecentBlog = function() {
      return $.ajax({
        url: "/blog/latest",
        success: (function(_this) {
          return function(data) {
            data = JSON.parse(data);
            $('#recent-blog-post-summary').html(data['newest_post_description']);
            $('#recent-blog-post-link').attr('href', data['newest_post_link']);
            $('#recent-blog-post-title').html(data['newest_post_title']);
            $('#recent-blog-post-published-date').html(data["newest_post_pub_date"]);
            return console.log();
          };
        })(this),
        error: (function(_this) {
          return function(err) {
            console.log("error requesting newest blog from server");
            return console.log(err);
          };
        })(this)
      });
    };

    MapCanvasView.prototype.getRecentPlace = function() {
      return $.ajax({
        url: window.location.origin + "/places/recent",
        dataType: "json",
        success: (function(_this) {
          return function(data) {
            var mostRecentPlace, mrpString;
            mostRecentPlace = data[0];
            mrpString = "<b>" + mostRecentPlace['location'] + "</b> from <i>" + mostRecentPlace['title'] + "</i> by  <b>" + mostRecentPlace['author'] + "</b>";
            return $('#newest_scene').html(mrpString);
          };
        })(this),
        error: (function(_this) {
          return function(err) {
            return console.log("places recent error: " + JSONG.stringify(err));
          };
        })(this)
      });
    };

    MapCanvasView.prototype.render = function(event) {
      var annPetry, richardWright;
      if (event === 'sync') {
        this.mapWithMarkers();
      }
      if (window.location.href.indexOf('armistad') > -1) {
        richardWright = this.collection.where({
          author: "Richard Wright"
        });
        annPetry = this.collection.where({
          author: "Ann Petry"
        });
        console.log("richard Wright: " + JSON.stringify(richardWright));
        return console.log("Ann Petry: " + JSON.stringify(annPetry));
      }
    };

    MapCanvasView.prototype.googlemap = function() {
      var map_elem;
      if (this.gmap != null) {
        return this.gmap;
      }
      map_elem = document.getElementById(this.$el.selector);
      this.gmap = new google.maps.Map(map_elem, this.mapOptions);
      this.mapCenter = this.gmap.getCenter();
      google.maps.event.addListener(this.gmap, 'bounds_changed', this.handleViewportChange);
      return this.gmap;
    };

    MapCanvasView.prototype.handleViewportChange = function(event) {
      var center, centerGeoPt;
      center = this.gmap.getCenter();
      centerGeoPt = {
        lat: center[Object.keys(center)[0]],
        lon: center[Object.keys(center)[1]]
      };
      if (this.gmap.getZoom() >= this.settings.maxTerrainZoom) {
        return this.gmap.setMapTypeId(google.maps.MapTypeId.ROADMAP);
      } else {
        return this.gmap.setMapTypeId(google.maps.MapTypeId.TERRAIN);
      }
    };

    MapCanvasView.prototype.closeNewEntry = function() {
      return $('#new_entry').hide();
    };

    MapCanvasView.prototype.updateCollection = function(event) {
      var center, centerGeoPt, collection_url, query, update, zoom;
      center = this.gmap.getCenter();
      centerGeoPt = {
        lat: center[Object.keys(center)[0]],
        lng: center[Object.keys(center)[1]]
      };
      zoom = this.gmap.getZoom();
      console.log('pan/zoom idle', centerGeoPt, zoom);
      if (window.CENTER != null) {
        console.log(window.CENTER);
        console.log(Math.abs(window.CENTER.lat - centerGeoPt.lat));
        console.log(Math.abs(window.CENTER.lng - centerGeoPt.lng));
      } else {
        window.CENTER = centerGeoPt;
      }
      query = '?lat=' + centerGeoPt.lat + '&lon=' + centerGeoPt.lng;
      collection_url = '/places/near' + query;
      update = false;
      if (Math.abs(window.CENTER.lat - centerGeoPt.lat) > 5) {
        update = true;
      }
      if (Math.abs(window.CENTER.lng - centerGeoPt.lng) > 5) {
        update = true;
      }
      if (update) {
        window.CENTER = centerGeoPt;
        return this.collection.reset(collection_url);
      }
    };

    MapCanvasView.prototype.marker = function() {
      console.log('marker, p anonymous function tbh');
      if (this.placeInfowindow != null) {
        this.placeInfowindow.close();
      }
      return new google.maps.Marker();
    };

    MapCanvasView.prototype.infowindow = function() {
      var iw;
      if (this.infowindows.length) {
        this.closeInfowindows();
      }
      iw = new google.maps.InfoWindow();
      this.infowindows.push(iw);
      return iw;
    };

    MapCanvasView.prototype.closeInfowindows = function() {
      var iw, j, len, ref, results1;
      ref = this.infowindows;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        iw = ref[j];
        results1.push(iw.close());
      }
      return results1;
    };

    MapCanvasView.prototype.mappoint = function(latitude, longitude) {
      console.log("MapCanvasView called");
      console.log("--lat: " + latitude);
      console.log("--lng: " + longitude);
      return new google.maps.LatLng(latitude, longitude);
    };

    MapCanvasView.prototype.markerFromMapLocation = function(map, location) {
      var markerSettings;
      console.log("markerFromMapLocation");
      markerSettings = {
        position: location,
        map: map,
        animation: google.maps.Animation.DROP,
        draggable: true,
        icon: window.location.origin + '/img/newplacepin.png'
      };
      return new google.maps.Marker(markerSettings);
    };

    MapCanvasView.prototype.updateInfoWindow = function(text, location, map1) {
      var infowindow;
      this.map = map1 != null ? map1 : this.googlemap('hpmap');
      infowindow = this.infowindow();
      infowindow.setContent(text);
      infowindow.setPosition(location);
      return infowindow.open(map);
    };

    MapCanvasView.prototype.setUserPlaceFromLocation = function(location) {
      console.log("MapCanvasView.setuserPlaceFromLocation(location) executed");
      console.log("--location: " + location);
      return this.userPlace = locationclass(extend(PlacingLit.Models.Location, Backbone.Model));
    };

    MapCanvasView.prototype.defaults = {
      title: 'Put Title Here',
      author: 'Someone\'s Name goes here'
    };

    MapCanvasView.prototype.url = '/places/add';

    MapCanvasView.prototype.showInfowindowFormAtLocation = function(map, marker, location) {
      this.closeInfowindows();
      if (!Modernizr.input.placeholder) {
        google.maps.event.addListener(this.userInfowindow, 'domready', (function(_this) {
          return function() {};
        })(this), this.clearPlaceholders());
      }
      $('#map_canvas').find('#guidelines').on('click', (function(_this) {
        return function(event) {
          return $('#helpmodal').modal();
        };
      })(this));
      return google.maps.event.addListenerOnce(this.userInfowindow, 'closeclick', (function(_this) {
        return function() {
          return _this.userMapsMarker.setMap(null);
        };
      })(this));
    };

    MapCanvasView.prototype.clearPlaceholders = function() {
      $('#title').one('keypress', function() {
        return $('#title').val('');
      });
      $('#author').one('keypress', function() {
        return $('#author').val('');
      });
      $('#place_name').one('keypress', function() {
        return $('#place_name').val('');
      });
      $('#date').one('keypress', function() {
        return $('#date').val('');
      });
      $('#actors').one('keypress', function() {
        return $('#actors').val('');
      });
      $('#symbols').one('keypress', function() {
        return $('#symbols').val('');
      });
      $('#scene').one('keypress', function() {
        return $('#scene').val('');
      });
      $('#notes').one('keypress', function() {
        return $('#notes').val('');
      });
      return $('#image_url').one('keypress', function() {
        return $('#image_url').val('');
      });
    };

    MapCanvasView.prototype.clearMapMarker = function(marker) {
      marker.setMap(null);
      return marker = null;
    };

    MapCanvasView.prototype.suggestTitles = function(title_data) {
      var i, i_1st_char, j, k, len, len1, li, new_search, new_searchTxt, parent, searchTxt, title, upcase_searchTxt;
      console.log("suggestTitles");
      parent = document.getElementById('bookSearchList');
      $(parent).empty();
      $(parent).show();
      searchTxt = $('#gcf').val();
      if (searchTxt !== "") {
        console.log('searchTxt: ' + searchTxt);
        upcase_searchTxt = searchTxt.split(' ');
        console.log('inital upcase search txt: ' + upcase_searchTxt);
        new_search = "";
        for (j = 0, len = upcase_searchTxt.length; j < len; j++) {
          i = upcase_searchTxt[j];
          console.log("word iteration: " + i);
          i_1st_char = i.substr(0, 1).toUpperCase();
          console.log("first char: " + i_1st_char);
          new_searchTxt = i_1st_char + i.substr(1);
          console.log("new search term: " + new_searchTxt);
          new_search = new_search + " " + new_searchTxt;
        }
        new_search = new_search.trim();
        console.log('Upcase search just in case:' + new_search);
        for (k = 0, len1 = title_data.length; k < len1; k++) {
          title = title_data[k];
          if (title.indexOf(searchTxt) > -1 || title.indexOf(new_search) > -1) {
            li = document.createElement('li');
            li.className = 'searchResultText searchResultTitleText';
            li.innerHTML = title;
            parent.appendChild(li);
            if ($(parent).children().length > 5) {
              break;
            }
          }
        }
        return $('.searchResultTitleText').click(function() {
          var windowLoc;
          windowLoc = window.location.protocol + '//' + window.location.host;
          return window.location.href = windowLoc + "/map/filter/title/" + this.innerHTML;
        });
      }
    };

    MapCanvasView.prototype.suggestAuthors = function(author_data) {
      var author, i, i_1st_char, j, k, len, len1, li, new_search, new_searchTxt, parent, searchTxt, upcase_searchTxt;
      parent = document.getElementById('authorsSearchList');
      $(parent).empty();
      $(parent).show();
      searchTxt = $('#gcf').val();
      if (searchTxt !== "") {
        console.log('searchTxt: ' + searchTxt);
        upcase_searchTxt = searchTxt.split(' ');
        console.log('inital upcase search txt: ' + upcase_searchTxt);
        new_search = "";
        for (j = 0, len = upcase_searchTxt.length; j < len; j++) {
          i = upcase_searchTxt[j];
          console.log("word iteration: " + i);
          i_1st_char = i.substr(0, 1).toUpperCase();
          console.log("first char: " + i_1st_char);
          new_searchTxt = i_1st_char + i.substr(1);
          console.log("new search term: " + new_searchTxt);
          new_search = new_search + " " + new_searchTxt;
        }
        new_search = new_search.trim();
        console.log('Upcase search just in case:' + new_search);
        for (k = 0, len1 = author_data.length; k < len1; k++) {
          author = author_data[k];
          if (author.indexOf(searchTxt) > -1 || author.indexOf(new_search) > -1) {
            li = document.createElement('li');
            li.className = 'searchResultText';
            li.innerHTML = author;
            parent.appendChild(li);
            if ($(parent).children().length > 5) {
              break;
            }
          }
        }
        return $('.searchResultText').click(function() {
          var windowLoc;
          windowLoc = window.location.protocol + '//' + window.location.host;
          return window.location.href = windowLoc + "/map/filter/author/" + this.innerHTML;
        });
      }
    };

    MapCanvasView.prototype.markersForEachScene = function(markers) {
      console.log("markersForEachScene");
      return markers.each((function(_this) {
        return function(model) {
          return _this.dropMarkerForStoredLocation(model);
        };
      })(this));
    };

    MapCanvasView.prototype.markerArrayFromCollection = function(collection) {
      var model;
      return (function() {
        var j, len, ref, results1;
        ref = collection.models;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          model = ref[j];
          results1.push(this.buildMarkerFromLocation(model));
        }
        return results1;
      }).call(this);
    };

    MapCanvasView.prototype.updateInfoOverlay = function(info) {};

    MapCanvasView.prototype.markerClustersForScenes = function(locations) {
      var allMarkerCluster, cluster_options;
      cluster_options = {
        minimumClusterSize: 5
      };
      return allMarkerCluster = new MarkerClusterer(this.gmap, locations, cluster_options);
    };

    MapCanvasView.prototype.hideMarkers = function() {
      var j, len, marker, ref, results1;
      ref = this.allMarkers;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        marker = ref[j];
        results1.push(marker.setMap(null));
      }
      return results1;
    };

    MapCanvasView.prototype.showMarkers = function() {
      var j, len, marker, ref, results1;
      ref = this.allMarkers;
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        marker = ref[j];
        results1.push(marker.setMap(this.gmap));
      }
      return results1;
    };

    MapCanvasView.prototype.mapWithMarkers = function() {
      if (this.gmap == null) {
        this.gmap = this.googlemap();
      }
      this.allMarkers = this.markerArrayFromCollection(this.collection);
      this.markerClustersForScenes(this.allMarkers);
      this.positionMap();
      this.isUserLoggedIn((function(_this) {
        return function() {
          $('#addscenebutton').on('click', _this.handleAddSceneButtonClick);
          return $('#addscenebutton').show();
        };
      })(this));
      if (window.location.href.indexOf("nyc") > -1) {
        console.log("nyc collection zoom level 12");
        this.gmap.setZoom(12);
        $('#mapOverlay').css("display", "none");
      }
      if (window.location.href.indexOf("zimbabwe") > -1) {
        console.log("zimbabwe collection zoom level 12");
        this.gmap.setZoom(6);
        return $('#mapOverlay').css("display", "none");
      }
    };

    MapCanvasView.prototype.positionMap = function() {
      var defaultCoords, mapcenter, usaCoords, usacenter;
      if (window.CENTER != null) {
        mapcenter = new google.maps.LatLng(window.CENTER.lat, window.CENTER.lng);
        this.gmap.setCenter(mapcenter);
        if (window.location.pathname.indexOf('collections') !== -1) {
          this.gmap.setZoom(this.settings.zoomLevel.wide);
        } else {
          this.gmap.setZoom(this.settings.zoomLevel["default"]);
        }
        if (window.location.pathname.indexOf('author') !== -1) {
          this.gmap.setZoom(this.settings.zoomLevel.wide);
        }
        if ((window.location.pathname.indexOf('map') > -1) && (window.location.pathname.indexOf('collections') !== -1) && (window.location.pathname.indexOf('filter') !== -1)) {
          console.log("this is a coordinate map");
          return this.gmap.setZoom(this.settings.zoomLevel.close);
        }
      } else {
        usaCoords = {
          lat: 39.8282,
          lng: -98.5795
        };
        usacenter = new google.maps.LatLng(usaCoords.lat, usaCoords.lng);
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition((function(_this) {
            return function(position) {
              var userCoords;
              userCoords = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
              };
              return _this.gmap.setCenter(userCoords);
            };
          })(this), (function(_this) {
            return function(error) {
              var defaultCoords;
              defaultCoords = {
                lat: 41.3068858,
                lng: -72.9260839
              };
              return _this.gmap.setCenter(defaultCoords);
            };
          })(this));
        } else {
          defaultCoords = {
            lat: 41.3068858,
            lng: -72.9260839
          };
          this.gmap.setCenter(defaultCoords);
        }
        return this.gmap.setZoom(8);
      }
    };

    MapCanvasView.prototype.handleMapClick = function(event) {
      return this.setUserMapMarker(this.gmap, event.latLng);
    };

    MapCanvasView.prototype.handleAddSceneButtonClick = function() {
      $('#entry-image').hide();
      $('.entry').hide();
      $('#tabs').hide();
      $('.new_scene_section').hide();
      $('#new_scene_book_info').show();
      this.setUserMapMarker(this.gmap, this.gmap.getCenter());
      $('#info-overlay').show();
      $('#new_entry').show();
      return $('.leave_new_scene_form').click(function() {
        $('#info-overlay').hide();
        return $('.entry').hide();
      });
    };

    MapCanvasView.prototype.setUserMapMarker = function(map, location) {
      if (this.userMapsMarker != null) {
        this.userMapsMarker.setMap(null);
      }
      if (this.userInfowindow != null) {
        this.userInfowindow.close();
      }
      this.userMapsMarker = this.markerFromMapLocation(map, location);
      this.userMapsMarker.setMap(map);
      google.maps.event.addListenerOnce(this.userMapsMarker, 'click', (function(_this) {
        return function(event) {
          return _this.isUserLoggedIn(_this.dropMarkerForNewLocation);
        };
      })(this));
      return this.showUserMarkerHelp();
    };

    MapCanvasView.prototype.showUserMarkerHelp = function() {
      var content, loginWindowPosition;
      if (this.userMapsMarker) {
        loginWindowPosition = this.userMapsMarker.getPosition();
        this.closeInfowindows();
        this.userInfowindow = this.infowindow();
        content = '<div id="usermarker">';
        content += '<div>Drag this marker to place.<br>';
        content += 'Click the marker to add the scene</div></div>';
        this.userInfowindow.setContent(content);
        this.userInfowindow.setPosition(loginWindowPosition);
        this.userInfowindow.open(this.gmap, this.userMapsMarker);
        google.maps.event.addListenerOnce(this.userInfowindow, 'closeclick', (function(_this) {
          return function() {
            return _this.userMapsMarker.setMap(null);
          };
        })(this));
        return console.log('showuserMapMarkerHelp - addscene marker position: ' + this.userMapsMarker.getPosition());
      }
    };

    MapCanvasView.prototype.isUserLoggedIn = function(callback) {
      return $.ajax({
        datatype: 'json',
        url: '/user/status',
        success: (function(_this) {
          return function(data) {
            if (data.status === 'logged in') {
              return callback();
            } else {
              $('#addscenebutton').click(function() {
                return window.location.href = $('#loginlink').attr('href');
              });
              return console.log("User is not logged in");
            }
          };
        })(this)
      });
    };

    MapCanvasView.prototype.showLoginInfoWindow = function() {
      var content, loginWindowPosition, login_url;
      if (this.userMapsMarker) {
        loginWindowPosition = this.userMapsMarker.getPosition();
      } else {
        loginWindowPosition = this.gmap.getCenter();
      }
      this.closeInfowindows();
      this.userInfowindow = this.infowindow();
      content = '<div id="usermarker">';
      content += '<div>You must be logged in to update content.</div><br>';
      login_url = document.getElementById('loginlink').href;
      content += '<a href="' + login_url + '"><button>log in</button></a></p>';
      content += '</div>';
      this.userInfowindow.setContent(content);
      this.userInfowindow.setPosition(loginWindowPosition);
      this.userInfowindow.open(this.gmap, this.userMapsMarker);
      return google.maps.event.addListener(this.userInfowindow, 'closeclick', (function(_this) {
        return function() {
          return _this.userMapsMarker.setMap(null);
        };
      })(this));
    };

    MapCanvasView.prototype.dropMarkerForNewLocation = function() {
      this.showInfowindowFormAtLocation(this.gmap, this.userMapsMarker, location);
      this.setUserPlaceFromLocation(location);
      return this.handleInfowindowButtonClick();
    };

    MapCanvasView.prototype.updateInfowindowWithMessage = function(infowindow, response, refresh) {
      var textcontainer;
      console.log('new marker', response, refresh);
      textcontainer = '<div id="thankswindow">' + response.message + '</div>';
      $('#new_scene_submit').append(textcontainer);
      if (refresh) {
        return google.maps.event.addListenerOnce(infowindow, 'closeclick', (function(_this) {
          return function() {
            _this.userMapsMarker.setMap(null);
            return _this.showUpdatedMap();
          };
        })(this));
      }
    };

    MapCanvasView.prototype.showUpdatedMapWithNewScene = function(scene) {};

    MapCanvasView.prototype.showUpdatedMap = function() {
      var maps;
      return maps = new MapCanvasView;
    };

    MapCanvasView.prototype.handleInfowindowButtonClick = function() {
      var $addPlaceButton;
      $addPlaceButton = $('#new_scene_submit_btn');
      if ($addPlaceButton != null) {
        return $addPlaceButton.on('click', this.addPlace);
      }
    };

    MapCanvasView.prototype.getFormValues = function() {
      var $form, form_data, markerLat, markerLng;
      $form = $('#new_scene_form');
      form_data = {
        title: $form.find('#new_scene_title').val(),
        author: $form.find('#new_scene_author').val(),
        place_name: $form.find('#new_scene_place_name').val(),
        scene: $form.find('#new_scene_scene').val(),
        notes: $form.find('#new_scene_notes').val(),
        image_url: $form.find('#image_url').val(),
        check_in: $form.find('#new_scene_check_in').prop('checked')
      };
      markerLat = this.userMapsMarker.getPosition().lat();
      markerLng = this.userMapsMarker.getPosition().lng();
      console.log(" user map marker lat - lng: " + markerLat + " - " + markerLng);
      form_data.latitude = markerLat;
      form_data.longitude = markerLng;
      console.log(form_data);
      if ((form_data.title !== '') && (form_data.author !== '') && (form_data.place_name !== '') && (form_data.scene !== '') && (form_data.notes !== '') && (form_data.latitude !== '') && (form_data.longitude !== '')) {
        return form_data;
      } else {
        return alert("All fields must be filled to add a  new Scene! ");
      }
    };

    MapCanvasView.prototype.isFormComplete = function(form_data) {
      var completed_entry, field, field_name, j, len, required_fields;
      required_fields = ['title', 'author', 'place_name', 'scene', 'notes'];
      completed_entry = true;
      this.missing_fields = '';
      for (j = 0, len = required_fields.length; j < len; j++) {
        field = required_fields[j];
        if (form_data[field].length === 0) {
          field_name = field.charAt(0).toUpperCase();
          field_name += field.substr(1).toLowerCase();
          field_name = field_name.replace('_', ' ');
          this.missing_fields += 'Missing ' + field_name + '.</br>';
          completed_entry = false;
        }
      }
      return completed_entry;
    };

    MapCanvasView.prototype.addPlace = function() {
      var error_msg, form_data, location, msg, response, status;
      console.log("addplace is firing");
      form_data = this.getFormValues();
      if (this.isFormComplete(form_data)) {
        msg = '<span>adding... please wait...</span>';
        $('#map_canvas .infowindowform').find('#addplacebutton').replaceWith(msg);
        location = new PlacingLit.Models.Location();
        return status = location.save(form_data, {
          error: (function(_this) {
            return function(model, xhr, options) {
              return console.log('add place error', model, xhr, options);
            };
          })(this),
          success: (function(_this) {
            return function(model, response, options) {
              _this.updateInfowindowWithMessage(_this.userInfowindow, response, true);
              return window.location.reload();
            };
          })(this)
        });
      } else {
        error_msg = '<p>Close this window and click the marker to start over. <br> Fill out some of these fields so we can add your scene. <br> Thanks.</p>';
        response = {
          message: this.missing_fields + error_msg
        };
        this.updateInfowindowWithMessage(this.userInfowindow, response, false);
        return false;
      }
    };

    MapCanvasView.prototype.geocoderSearch = function() {
      var address, geocoder;
      address = document.getElementById('gcf').value;
      if (address) {
        geocoder = new google.maps.Geocoder();
        return geocoder.geocode({
          'address': address
        }, (function(_this) {
          return function(results, status) {
            var position;
            if (status === google.maps.GeocoderStatus.OK) {
              position = results[0].geometry.location;
              _this.gmap.setCenter(position);
              return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
            } else {
              return alert("geocode was not successful: " + status);
            }
          };
        })(this));
      }
    };

    MapCanvasView.prototype.populateSuggestedSearches = function(authors, titles) {
      var geocoder, searchTxt;
      console.log("populateSuggestedSearches");
      this.hideOverlay();
      searchTxt = document.getElementById('gcf').value;
      if (searchTxt) {
        geocoder = new google.maps.Geocoder();
        return geocoder.geocode({
          'address': searchTxt
        }, (function(_this) {
          return function(results, status) {
            var child, i, j, numRes, parent, ref, results1;
            if (status === google.maps.GeocoderStatus.OK) {
              console.log("how many results are returned? ");
              console.log("results type: " + typeof results);
              console.log("length of results: " + _.size(results));
              parent = document.getElementById('locationsSearchList');
              $(parent).empty();
              numRes = results.length > 5 ? 4 : results.length;
              results1 = [];
              for (i = j = 0, ref = numRes; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                child = _this.createSearchElement(results[i]);
                results1.push(parent.appendChild(child));
              }
              return results1;
            } else if (status === google.maps.GeocoderStatus.ZERO_RESULTS) {
              return console.log("No Locations found, try rephrasing search");
            } else {
              return alert("geocode was not successful: " + status);
            }
          };
        })(this));
      }
    };

    MapCanvasView.prototype.hideOverlay = function() {
      var overlay;
      overlay = document.getElementById("mapOverlay");
      return overlay.style.display = 'none';
    };

    MapCanvasView.prototype.populateSuggestedAuthors = function(searchTxt) {
      var query;
      console.log("Populate Suggested Authors: ", searchTxt);
      if (searchTxt) {
        query = searchTxt.replace(/ /, "%20");
        return $.ajax({
          url: "/places/authors/" + query,
          success: (function(_this) {
            return function(data) {
              var author, i, j, len, li, location, name, parent, results1;
              parent = document.getElementById('authorsSearchList');
              $(parent).empty;
              i = 0;
              results1 = [];
              for (j = 0, len = data.length; j < len; j++) {
                author = data[j];
                if (i > 5) {
                  break;
                }
                location = new google.maps.LatLng(author.scene_location.latitude, author.scene_location.longitude);
                name = author.author;
                li = document.createElement('li');
                li.className = 'searchResultText';
                li.innerHTML = name;
                li.data - (location = location);
                li.addEventListener('click', function() {
                  _this.collection.fetch();
                  _this.gmap.setCenter(location);
                  return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
                });
                parent.appendChild(li);
                results1.push(i++);
              }
              return results1;
            };
          })(this),
          error: function(err) {
            return console.log(err);
          }
        });
      }
    };

    MapCanvasView.prototype.populateSuggestedTitles = function(searchTxt) {
      var query;
      if (searchTxt) {
        query = searchTxt.replace(/ /, "");
        return $.ajax({
          url: "/places/titles/" + query,
          success: (function(_this) {
            return function(data) {
              var i, j, len, li, location, parent, results1, title;
              parent = document.getElementById('bookSearchList');
              console.log("PopulateSuggestedTitles is firing");
              $(parent).empty;
              i = 0;
              results1 = [];
              for (j = 0, len = data.length; j < len; j++) {
                title = data[j];
                if (i > 5) {
                  break;
                }
                li = document.createElement('li');
                li.className = 'searchResultText';
                location = new google.maps.LatLng(title.latitude, title.longitude);
                li.innerHTML = title.title;
                li.addEventListener('click', function() {
                  _this.gmap.setCenter(location);
                  return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
                });
                parent.appendChild(li);
                results1.push(i++);
              }
              return results1;
            };
          })(this),
          error: function(err) {
            return console.log(err);
          }
        });
      }
    };

    MapCanvasView.prototype.null_function = function() {
      return null;
    };

    MapCanvasView.prototype.createSearchElement = function(element) {
      var li, location, name;
      console.log("CreateSearchElement");
      location = element.geometry.location;
      name = element.formatted_address;
      li = document.createElement('li');
      li.innerHTML = name;
      li.data - (location = location);
      li.addEventListener('click', (function(_this) {
        return function() {
          _this.gmap.setCenter(location);
          return _this.gmap.setZoom(_this.settings.zoomLevel["default"]);
        };
      })(this));
      return li;
    };

    MapCanvasView.prototype.createSearchHide = function() {
      var hide;
      console.log("createSearchHide");
      hide = document.createElement('li');
      hide.innerHTML = "Hide Search Results";
      hide.id = "hideSearch";
      hide.addEventListener('click', (function(_this) {
        return function() {
          return $('#geosearchResults').css("display", "none");
        };
      })(this));
      return hide;
    };

    MapCanvasView.prototype.attachSearchHandler = function() {
      return $.ajax({
        url: "/places/authors",
        success: (function(_this) {
          return function(authors) {
            return $.ajax({
              url: "/places/titles",
              success: function(titles) {
                return $('#gcf').on('keydown', function(keycode, event) {
                  var author_data, title_data;
                  if (keycode.which === 13) {
                    console.log("Enter key pressed in #gcf");
                    author_data = [];
                    title_data = [];
                    $.each(authors, function(key, value) {
                      return author_data.push(value.author.toString());
                    });
                    $.each(titles, function(key, value) {
                      return title_data.push(value.title.toString());
                    });
                    _this.hideOverlay();
                    $('.geosearchResults').attr('style', 'display: block;');
                    $('#mapcontainer').click(function() {
                      return $('.geosearchResults').hide();
                    });
                    $('#hideSearchButton').click(function() {
                      console.log("hide search button");
                      return $('.geosearchResults').hide();
                    });
                    $('#hideSearchButton').bind('touchstart', function() {
                      console.log("hide search button");
                      return $('.geosearchResults').hide();
                    });
                    _this.suggestAuthors(author_data);
                    _this.suggestTitles(title_data);
                    return _this.populateSuggestedSearches(authors, titles);
                  }
                });
              }
            });
          };
        })(this)
      });
    };

    MapCanvasView.prototype.linkMagnifyClickGcf = function() {
      var enter_press;
      console.log("linkMagnifyClickGcf executed");
      enter_press = jQuery.Event('keydown');
      enter_press.which = 13;
      return $('#search').click(function() {
        $('#gcf').trigger(enter_press);
        return $('.geosearchResults').attr('style', 'display: block;');
      });
    };

    MapCanvasView.prototype.attachNewSceneHandler = function() {
      return $('#new_scene_submit_btn').click((function(_this) {
        return function() {
          return _this.addPlace();
        };
      })(this));
    };

    MapCanvasView.prototype.sceneFieldsTemplate = function() {
      var field_format;
      field_format = '<br><span class="pllabel"><%= label %></span>';
      field_format += '<br><span class="plcontent"><%= content %></span>';
      return _.template(field_format);
    };

    MapCanvasView.prototype.sceneButtonTemplate = function() {
      var aff_span, buybook_button, goodrd_button;
      aff_span = '<span id="affbtns">';
      buybook_button = '<span class="buybook" id="<%= buy_isbn %>">';
      buybook_button += '<img src="/img/ib.png" id="rjjbuy"/></span>';
      goodrd_button = '<span class="reviewbook" id="<%= gr_isbn %>">';
      goodrd_button += '<img id="grbtn" src="/img/goodrd.png"></span>';
      aff_span += buybook_button + goodrd_button + '</span>';
      return _.template(aff_span);
    };

    MapCanvasView.prototype.sceneCheckinButtonTemplate = function() {
      var button_format;
      button_format = '<br><div id="checkin"><button class="btn visited"';
      button_format += 'id="<%=place_id %>">check-in</button></div>';
      return _.template(button_format);
    };

    MapCanvasView.prototype.sceneUserImageTemplate = function() {
      var img;
      img = '<img class="infopic" src="<%= image_url %>">';
      return _.template(img);
    };

    MapCanvasView.prototype.sceneAPIImageTemplate = function(data_image_data) {
      var img;
      if (data_image_data && data_image_data.photo_id) {
        console.log("data_image_data:" + JSON.stringify(data_image_data));
        console.log("photo_id: " + data_image_data.photo_id);
      } else {
        console.log("data_image_data is missing");
      }
      img = '<a target="_blank" href="//www.panoramio.com/photo/<%= image_id %>" class = "panoramio-image" style = "background-image:url(http://static2.bareka.com/photos/medium/<%= image_id %>.jpg);"></a>';
      return _.template(img);
    };

    MapCanvasView.prototype.sceneTitleTemplate = function() {
      return _.template('<span class="lead"><%= title %> by <%= author %></span>');
    };

    MapCanvasView.prototype.buildInfowindow = function(data, updateButton) {
      var content, facebooklink, field, img, label, twitterlink;
      console.log('buildInfowindow');
      $('#tabs').show();
      this.clearInfowindowClickEvents();
      console.log("The database key is:" + data.id);
      content = '<div class="plinfowindow">';
      $('#entry-image').show();
      if (!data.image_data || !data.image_data.photo_id) {
        img = '<img src="' + window.location.origin + '/img/placingLitNoImageFound.png" />';
        $('#entry-image').html(img);
      }
      if (!!data.image_data) {
        $('#entry-image').html(this.sceneAPIImageTemplate(data.image_data)({
          image_id: data.image_data.photo_id
        }));
      }
      $('#entry-scene-title').html(data.title + "<br />" + "<span>by " + data.author + '</span>');
      $('#entry-place-title').html(data.title + "<br />" + "<span>by " + data.author + '</span>');
      $('#entry-actions-title').html(data.title + "<br />" + "<span>by " + data.author + '</span>');
      $('#entry-scene-place-name').html(data.place_name);
      $('#entry-place-place-name').html(data.place_name);
      $('#entry-place-location-name').html(data.place_name);
      $('#entry-actions-place-name').html(data.place_name);
      $('#learn-more-place-name').html(data.place_name);
      $('#entry-scene-description').html(data.description);
      $('#entry-characters-body').html(data.characters);
      $('#entry-symbols-body').html(data.symbols);
      $('#entry-place-body').html(data.notes);
      $('#entry-visits-body').html(data.visits);
      $('#wikiActionLink').attr('href', "https://en.wikipedia.org/w/index.php?search=" + data.place_name);
      $('#wikiActionLink2').attr('href', "https://en.wikipedia.org/w/index.php?search=" + data.place_name);
      $("#googleActionLink").attr('href', "https://www.google.com/search?q=" + data.place_name);
      $("#googleActionLink2").attr('href', "https://www.google.com/search?q=" + data.place_name);
      $("#googleActionLinkMoz").attr('href', "https://www.google.com/search?q=" + data.place_name);
      $("#googleActionLinkMoz2").attr('href', "https://www.google.com/search?q=" + data.place_name);
      $('#ibActionLink').attr('href', "http://www.rjjulia.com/book/" + data.isbn);
      $('#grActionLink').attr('href', "https://www.goodreads.com/book/isbn/" + data.isbn);
      $('#entry-symbols-body').html(data.symbols);
      $('#entry-place-body').html(data.notes);
      $('#entry-visits-body').html(data.visits);
      twitterlink = "https://twitter.com/intent/tweet?text=Check%20out%20" + data.title + "%20at%20" + data.place_name + "%20by%20visiting%20placing-literature.appspot.com/map/filter/id/" + data.id + "%20#getlit";
      $('#twitterActionLink').attr('href', twitterlink);
      facebooklink = 'http://www.facebook.com/share.php?u=http://www.placing-literature.appspot.com/map/filter/id/' + data.id;
      $('#facebookActionLink').attr('href', facebooklink);
      $('#share_url').val('placing-literature.appspot.com/map/filter/id/' + data.id);
      if (!!data.image_data) {
        content += this.sceneAPIImageTemplate()({
          image_id: data.image_data.photo_id
        });
      }
      content += this.sceneTitleTemplate()({
        title: data.title,
        author: data.author
      });
      for (field in this.field_labels) {
        label = this.field_labels[field];
        if (data[field]) {
          content += this.sceneFieldsTemplate()({
            label: label,
            content: data[field]
          });
        }
      }
      if (updateButton) {
        content += this.sceneCheckinButtonTemplate()({
          place_id: data.id
        });
      }
      if (!!data.isbn) {
        content += this.sceneButtonTemplate()({
          gr_isbn: data.isbn,
          buy_isbn: data.isbn
        });
        this.handleInfowindowButtonEvents();
      }
      content += '</div>';
      if ($('#entry-image').html === '') {
        console.log('entry-image is empty, insert default image');
      }
      return content;
    };

    MapCanvasView.prototype.closeSceneCard = function() {
      return $('#info-overlay').css('display', 'none');
    };

    MapCanvasView.prototype.openInfowindowForPlace = function(place_key, windowOptions) {
      var tracking, url;
      console.log('open', windowOptions);
      $('#info-overlay').animate({
        left: '-=1000'
      }, 700, function() {
        $('.entry').hide();
        $('#info-overlay').show();
        $('#scene_entry').show();
        $('#tabs').show();
        $('.tab').removeClass('activeTab');
        $('#scene_tab').addClass('activeTab');
        return $('#info-overlay').animate({
          left: '+=1000'
        }, 700);
      });
      url = '/places/info/' + place_key;
      console.log("openInfowindowForPlace place_key: " + place_key);
      window.PLACEKEY = null;
      if (windowOptions.marker) {
        tracking = {
          'category': 'marker',
          'action': 'open window',
          'label': windowOptions.scene.get('title') + ':' + place_key,
          'value': 1
        };
        this.mapEventTracking(tracking);
      }
      console.log("GET /places/info/" + place_key);
      return $.ajax({
        url: "/places/info/" + place_key,
        dataType: "json",
        success: (function(_this) {
          return function(data) {
            var iw;
            if (_this.placeInfowindow != null) {
              _this.placeInfowindow.close();
            }
            iw = _this.infowindow();
            console.log('build info window success:' + _this.url);
            console.log('buildInfoWindow:  data: ' + JSON.stringify(data));
            _this.buildInfowindow(data, true);
            console.log("openInfowindowForPlace() Location Data: " + JSON.stringify(data));
            if (windowOptions.position) {
              iw.setPosition(windowOptions.position);
              iw.open(_this.gmap);
              return _this.gmap.setCenter(windowOptions.position);
            }
          };
        })(this),
        error: (function(_this) {
          return function(err) {
            console.log('build info window error:' + url);
            console.log("err: " + JSON.stringify(err));
            return console.log('buildInfoWindow:  data: ' + JSON.stringify(data));
          };
        })(this)
      });
    };

    MapCanvasView.prototype.mapEventTracking = function(data) {
      return ga('send', 'event', data.category, data.action, data.label, data.value);
    };

    MapCanvasView.prototype.handleInfowindowButtonEvents = function() {
      var buy_url;
      buy_url = '//www.rjjulia.com/aff/PlacingLiterature/book/v/';
      $('#map_canvas').on('click', '.buybook', (function(_this) {
        return function(event) {
          var tracking;
          tracking = {
            'category': 'button',
            'action': 'buy',
            'label': event.currentTarget.id,
            'value': 1
          };
          _this.mapEventTracking(tracking);
          return window.open(buy_url + event.currentTarget.id);
        };
      })(this));
      return $('#map_canvas').on('click', '.reviewbook', (function(_this) {
        return function(event) {
          var tracking;
          tracking = {
            'category': 'button',
            'action': 'reviews',
            'label': event.currentTarget.id,
            'value': 1
          };
          _this.mapEventTracking(tracking);
          return window.open('//www.goodreads.com/book/isbn/' + event.currentTarget.id);
        };
      })(this));
    };

    MapCanvasView.prototype.clearInfowindowClickEvents = function() {
      $('#map_canvas').off('click', '.visited');
      $('#map_canvas').off('click', '.buybook');
      return $('#map_canvas').off('click', '.reviewbook');
    };

    MapCanvasView.prototype.handleCheckinButtonClick = function(event) {
      return $('#map_canvas').on('click', '.visited', (function(_this) {
        return function(event) {
          return _this.isUserLoggedIn(function() {
            $('.visited').hide();
            _this.placeInfowindow.setContent('updating...');
            return $.getJSON('/places/visit/' + event.target.id, function(data) {
              return _this.placeInfowindow.setContent(_this.buildInfowindow(data, false));
            });
          });
        };
      })(this));
    };

    MapCanvasView.prototype.buildMarkerFromLocation = function(location) {
      var author, lat, lng, marker, markerParams, title;
      $('#slideshow').css('display', 'none');
      $('#loading_indicator').css('display', 'none');
      console.log("buildMarkerFromLocation");
      lat = location.get('latitude');
      lng = location.get('longitude');
      title = location.get('title');
      author = location.get('author');
      markerParams = this.settings.markerDefaults;
      markerParams.position = new google.maps.LatLng(lat, lng);
      markerParams.title = title + " by " + author;
      marker = new google.maps.Marker(markerParams);
      this.locationMarkerEventHandler(location, marker);
      return marker;
    };

    MapCanvasView.prototype.locationMarkerEventHandler = function(location, marker) {
      return google.maps.event.addListener(marker, 'click', (function(_this) {
        return function(event) {
          var placeInfo, windowOptions;
          windowOptions = {
            marker: marker,
            scene: location
          };
          placeInfo = location.get('db_key');
          console.log("locMarkEventHandl: placeInfo: " + JSON.stringify(placeInfo));
          return _this.openInfowindowForPlace(location.get('db_key'), windowOptions);
        };
      })(this));
    };

    MapCanvasView.prototype.dropMarkerForStoredLocation = function(location) {
      var marker;
      console.log("dropMarkerForStoredLocation");
      marker = this.buildMarkerFromLocation(location);
      return marker.setMap(this.gmap);
    };

    MapCanvasView.prototype.handleInputAttributes = function() {
      var dealWithIE9Inputs, field, fields, j, len, results1;
      fields = $('#iwcontainer input');
      dealWithIE9Inputs = function(el) {
        return el.setAttribute('value', el.getAttribute('placeholder'));
      };
      results1 = [];
      for (j = 0, len = fields.length; j < len; j++) {
        field = fields[j];
        results1.push(dealWithIE9Inputs(field));
      }
      return results1;
    };

    return MapCanvasView;

  })(Backbone.View);

  PlacingLit.Views.RecentPlaces = (function(superClass) {
    extend(RecentPlaces, superClass);

    function RecentPlaces() {
      return RecentPlaces.__super__.constructor.apply(this, arguments);
    }

    RecentPlaces.prototype.model = PlacingLit.Models.Location;

    RecentPlaces.prototype.el = '#recentcontent';

    RecentPlaces.prototype.max_desc_length = 100;

    RecentPlaces.prototype.initialize = function() {
      this.collection = new PlacingLit.Collections.Locations;
      this.collection.fetch({
        url: '/places/recent'
      });
      return this.listenTo(this.collection, 'all', this.render);
    };

    RecentPlaces.prototype.render = function(event) {
      if (event === 'sync') {
        return this.showNewestPlaces();
      }
    };

    RecentPlaces.prototype.showNewestPlaces = function() {
      var j, len, link, listFragment, listItems, location, locations;
      locations = this.collection.models;
      listFragment = document.createDocumentFragment();
      this.$el.find('li').remove();
      listItems = (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = locations.length; j < len; j++) {
          location = locations[j];
          results1.push(this.getPlaceLink(location));
        }
        return results1;
      }).call(this);
      for (j = 0, len = listItems.length; j < len; j++) {
        link = listItems[j];
        listFragment.appendChild(link);
      }
      this.$el.append(listFragment);
      return listFragment;
    };

    RecentPlaces.prototype.getPlaceLink = function(place) {
      var li, link, location, title;
      li = document.createElement('li');
      li.className = 'searchResultText';
      li.id = place.get('db_key');
      link = document.createElement('a');
      link.href = '/map/' + place.get('latitude') + ',' + place.get('longitude');
      link.href += '?key=' + place.get('db_key');
      title = place.get('title');
      link.textContent = title;
      if (place.get('location') != null) {
        location = place.get('location');
        if ((location + title).length > this.max_desc_length) {
          location = location.substr(0, this.max_desc_length - title.length) + '...';
        }
        link.textContent += ': ' + location;
      }
      li.appendChild(link);
      return li;
    };

    return RecentPlaces;

  })(Backbone.View);

  PlacingLit.Views.Countview = (function(superClass) {
    extend(Countview, superClass);

    function Countview() {
      return Countview.__super__.constructor.apply(this, arguments);
    }

    Countview.prototype.el = '#count';

    Countview.prototype.initialize = function() {
      this.model = new PlacingLit.Models.Metadata;
      this.model.fetch({
        url: '/places/count'
      });
      return this.listenTo(this.model, 'all', this.render);
    };

    Countview.prototype.render = function(event) {
      if (event === 'change:count') {
        return this.showCount();
      }
    };

    Countview.prototype.showCount = function() {
      return $(this.el).text(this.model.get('count') + ' scenes have been mapped');
    };

    return Countview;

  })(Backbone.View);

  PlacingLit.Views.Allscenes = (function(superClass) {
    extend(Allscenes, superClass);

    function Allscenes() {
      return Allscenes.__super__.constructor.apply(this, arguments);
    }

    Allscenes.prototype.el = '#scenelist';

    Allscenes.prototype.initialize = function() {
      this.collection = new PlacingLit.Collections.NewestLocationsByDate;
      this.collection.fetch();
      return this.listenTo(this.collection, 'all', this.render);
    };

    Allscenes.prototype.render = function(event) {
      if (event === 'sync') {
        return this.showAllScenes();
      }
    };

    Allscenes.prototype.showAllScenes = function() {
      var j, len, link, listFragment, listItems, location, locations;
      locations = this.collection.models;
      listFragment = document.createDocumentFragment();
      listItems = (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = locations.length; j < len; j++) {
          location = locations[j];
          results1.push(this.getPlaceLink(location));
        }
        return results1;
      }).call(this);
      for (j = 0, len = listItems.length; j < len; j++) {
        link = listItems[j];
        listFragment.appendChild(link);
      }
      this.$el.append(listFragment);
      return listFragment;
    };

    Allscenes.prototype.getPlaceLink = function(place) {
      var editImage, editLink, li, link;
      li = document.createElement('li');
      li.id = place.get('db_key');
      link = document.createElement('a');
      link.href = '/map/' + place.get('latitude') + ',' + place.get('longitude');
      link.href += '?key=' + place.get('db_key');
      link.textContent = place.get('title') + ': ' + place.get('location');
      editLink = document.createElement('a');
      editLink.href = '/admin/edit?key=' + place.get('db_key');
      editImage = document.createElement('img');
      editImage.src = '/img/edit-icon.png';
      editImage.style.height = '16px';
      editImage.className = 'editicon';
      editLink.appendChild(editImage);
      li.appendChild(editLink);
      li.appendChild(link);
      return li;
    };

    return Allscenes;

  })(Backbone.View);

  PlacingLit.Views.MapFilterView = (function(superClass) {
    var href;

    extend(MapFilterView, superClass);

    function MapFilterView() {
      this.openInfoWindowForShareLink = bind(this.openInfoWindowForShareLink, this);
      this.getPlacesByTitle = bind(this.getPlacesByTitle, this);
      this.getPlacesByAuthor = bind(this.getPlacesByAuthor, this);
      return MapFilterView.__super__.constructor.apply(this, arguments);
    }

    href = window.location.href;

    if (href.indexOf("map") > -1 && (href.indexOf("filter") > -1 || href.indexOf("id") > -1 || href.indexOf("collections") > -1 || href.indexOf("nyc") > -1 || href.indexOf("zimbabwe") > -1)) {
      $('#mapOverlay').css('display', 'none');
      console.log('FILETERD!!!!!');
    }

    MapFilterView.prototype.initialize = function(scenes) {
      var pathname;
      this.getRecentBlog();
      if (this.collection == null) {
        this.collection = new PlacingLit.Collections.Locations();
      }
      this.listenTo(this.collection, 'all', this.render);
      this.collection.reset(scenes);
      this.authors = this.suggestAuthors();
      pathname = window.location.pathname;
      if (pathname.indexOf("map") > -1 && pathname.indexOf("filter") > -1 && pathname.indexOf("id") > -1) {
        this.openInfoWindowForShareLink(scenes);
      }
      return this.isUserLoggedIn((function(_this) {
        return function() {
          console.log('User is logged in!');
          return $('#loginlink').html("Log Out");
        };
      })(this));
    };

    MapFilterView.prototype.render = function(event) {
      var mapcenter;
      if (this.gmap == null) {
        this.gmap = this.googlemap();
      }
      this.allMarkers = this.markerArrayFromCollection(this.collection);
      this.markerClustersForScenes(this.allMarkers);
      this.markersForEachScene(this.collection);
      this.attachSearchHandler();
      this.linkMagnifyClickGcf();
      mapcenter = new google.maps.LatLng(window.CENTER.lat, window.CENTER.lng);
      this.gmap.setCenter(mapcenter);
      if (window.location.pathname.indexOf("collections") > -1) {
        this.gmap.setZoom(this.settings.zoomLevel.wide);
      } else {
        this.gmap.setZoom(this.settings.zoomLevel.close);
      }
      if (window.location.href.indexOf("colct")) {
        console.log("map filter colct collection zoom level 4 ");
        this.gmap.setZoom(4);
        $('#mapOverlay').css("display", "none");
      }
      $('#addscenebutton').on('click', this.handleAddSceneButtonClick);
      $('#addscenebutton').show();
      return $('#featContentText').text("View Featured Content");
    };

    MapFilterView.prototype.getPlacesByAuthor = function(author_name) {
      var authors_places;
      console.log('get places by author');
      authors_places = this.collection.where({
        author: author_name
      });
      return console.log(author_name + "\'s places: " + JSON.stringify(authors_places));
    };

    MapFilterView.prototype.getPlacesByTitle = function(title_name) {
      var title_places;
      console.log('get places by title');
      title_places = this.collection.where({
        title: title_name
      });
      return console.log(title_name + "\'s places: " + JSON.stringify(title_places));
    };

    MapFilterView.prototype.filteredViewGeocoderSearch = function() {
      var address, geocoder;
      console.log("filteredViewGeocoderSearch ");
      address = document.getElementById('gcf').value;
      if (address) {
        geocoder = new google.maps.Geocoder();
        return geocoder.geocode({
          'address': address
        }, (function(_this) {
          return function(results, status) {
            var lat, lng, mapUrl, position;
            if (status === google.maps.GeocoderStatus.OK) {
              position = results[0].geometry.location;
              lat = position[Object.keys(position)[0]];
              lng = position[Object.keys(position)[1]];
              mapUrl = window.location.protocol + '//' + window.location.host;
              mapUrl += '/map/' + lat + ',' + lng;
              return window.location = mapUrl;
            } else {
              return alert("geocode was not successful: " + status);
            }
          };
        })(this));
      }
    };

    MapFilterView.prototype.attachFilteredViewSearchHandler = function() {
      document.getElementById("mapOverlay").style.display = 'none';
      $('#gcf').on('keydown', (function(_this) {
        return function(event) {
          if (event.which === 13 || event.keyCode === 13) {
            event.preventDefault();
            return _this.filteredViewGeocoderSearch();
          }
        };
      })(this));
      return $('#search').on('click', (function(_this) {
        return function(event) {
          return _this.filteredViewGeocoderSearch();
        };
      })(this));
    };

    MapFilterView.prototype.linkMagnifyClickGcf = function() {
      var enter_press;
      enter_press = jQuery.Event('keydown');
      enter_press.which = 13;
      return $('#search').click(function() {
        return $('#gcf').trigger(enter_press);
      });
    };

    MapFilterView.prototype.openInfoWindowForShareLink = function(scene) {
      var db_key, url;
      db_key = scene[0].db_key;
      $('#info-overlay').animate({
        left: '-=1000'
      }, 700, function() {
        $('.entry').hide();
        $('#info-overlay').show();
        $('#scene_entry').show();
        $('#tabs').show();
        $('.tab').removeClass('activeTab');
        $('#scene_tab').addClass('activeTab');
        return $('#info-overlay').animate({
          left: '+=1000'
        }, 700);
      });
      url = '/places/info/' + db_key;
      return $.ajax({
        url: "/places/info/" + db_key,
        dataType: "json",
        success: (function(_this) {
          return function(data) {
            var iw;
            if (_this.placeInfowindow != null) {
              _this.placeInfowindow.close();
            }
            iw = _this.infowindow();
            _this.buildInfowindow(data, true);
            console.log("openInfowindowForPlace() Location Data: " + JSON.stringify(data));
            iw.open(_this.gmap, windowOptions.marker);
            return _this.placeInfowindow = iw;
          };
        })(this),
        error: (function(_this) {
          return function(err) {
            console.log('build info window error:' + url);
            return console.log("err: " + JSON.stringify(err));
          };
        })(this)
      });
    };

    MapFilterView.prototype.updateCollection = function(event) {
      var center, centerGeoPt, collection_url, current_collection, new_markers, query, update, zoom;
      center = this.gmap.getCenter();
      centerGeoPt = {
        lat: center[Object.keys(center)[0]],
        lng: center[Object.keys(center)[1]]
      };
      zoom = this.gmap.getZoom();
      console.log('pan/zoom idle', centerGeoPt, zoom, this.collection.length);
      if (window.CENTER != null) {
        console.log(window.CENTER);
        console.log(Math.abs(window.CENTER.lat - centerGeoPt.lat));
        console.log(Math.abs(window.CENTER.lng - centerGeoPt.lng));
      } else {
        window.CENTER = centerGeoPt;
      }
      update = false;
      if (Math.abs(window.CENTER.lat - centerGeoPt.lat) > 5) {
        update = true;
      }
      if (Math.abs(window.CENTER.lng - centerGeoPt.lng) > 5) {
        update = true;
      }
      if (update) {
        console.log('adding new scenes');
        query = '?lat=' + centerGeoPt.lat + '&lon=' + centerGeoPt.lng;
        collection_url = '/places/near' + query;
        new_markers = new PlacingLit.Collections.Locations;
        new_markers.url = collection_url;
        current_collection = this.collection;
        window.CENTER = centerGeoPt;
        return new_markers.fetch({
          success: (function(_this) {
            return function(collection, response, options) {
              var set_options, union;
              console.log('current', current_collection.length, current_collection.models);
              console.log('new', collection.length, collection.models);
              union = _.union(current_collection.models, collection.models);
              set_options = {
                add: true,
                remove: false,
                merge: false
              };
              return _this.collection.reset(union, set_options);
            };
          })(this),
          error: (function(_this) {
            return function(collection, response, options) {
              return console.log('error', collection, response, options);
            };
          })(this)
        });
      }
    };

    return MapFilterView;

  })(PlacingLit.Views.MapCanvasView);

}).call(this);
